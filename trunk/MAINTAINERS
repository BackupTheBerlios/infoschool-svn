
        List of maintainers and how to write own code

We tried to build this system modular, so that many people can work together without disturbing each other.
If you want to write new code the best idea is to begin a new module. In this module you can do what you want without consequences to other modules.
Every module is in its own directory. So feel free to make a new directory like ./htdocs/mymodule/.
You should create the file var.php to use shared variables and functions in your directory. Here is the recommended example of an var.php in a module:

<?php
/*
 * This file is part of Infoschool - a web based school intranet.
 * Copyright (C) 2004 Your Name
 */
 if (!isset($root)) $root = './';
 $root.= '../';
 include $root.'var.php';
?>

The copyright notation has to be added to every code file part of infoschool.
"if (!isset($root)) $root = './';" is important if your module should support new sub-modules in the same way as your module.
"root.= '../';" corrects the possibly given variable.
"include $root.'var.php';" includes the var.php of the superior directory, which does the same until ./htdocs/var.php is reached.

Now write your files like this example:

<?php
/*
 * This file is part of Infoschool - a web based school intranet.
 * Copyright (C) 2004 Your Name
 */
 include 'var.php';

 Your_Code();
?>

Thenceforward all shared variables, functions and classes are available. I want to explain some of them and then give examples of files.

 (Object) output
This variable contains all information of the output to the user.
You can ensure that only logged in users can see your output:
 $output->secure();
You can add new information like titles:
 $output->title[] = 'Your new title';
You can add new headlines:
 $output->headline[] = 'Your new headline';
You can change the navigation menu:
 $output->menu['mymodule/'] = array(
   './' => 'My new module',
   'newer.php' => 'The new Skript',
   'newest.php' => 'My newest Skript',
 );
And then you can send your information to the user:
 $content = 'Hello World!';
 $output->out($content);
Or you can redirect to another page:
 redirect('./');

We recommend to seperate PHP-code, HTML-design and user-language.
The best way is to use templates and language files.
Write templates to ./tmpl/mymodule/ and language files to ./lang/languagename/mymodule/. Example:
./tmpl/mymodule/index.html
./lang/en/mymodule/index.html.lang

 An real example of using templates and language files:
  ./tmpl/hello/index.html

<p>
 <b>{hello world}</b><br />
 {my name is} {myname}.<br />
 {my friends}:<br />
 <ul>
  <tmpl:friends><li>{last}, {first}</li></tmpl:friends>
 </ul>
</p>


  ./lang/en/hello/index.html.lang

# Infoschool language file
# Only edit something between > and < to translate!

hello world>Hello World!<
my name is>My name is<
my friends>And these are my friends<


  ./htdocs/hello/var.php

<?php
/*
 * This file is part of Infoschool - a web based school intranet.
 * Copyright (C) 2004 Jon Doe
 */
 if (!isset($root)) $root = './';
 $root.= '../';
 include $root.'var.php';
?>


  ./htdocs/hello/index.php

<?php
/*
 * This file is part of Infoschool - a web based school intranet.
 * Copyright (C) 2004 Jon Doe
 */
 include 'var.php';

 $output->secure();

 $friends = array();
 $friends[] = array(
   'first' => 'Scott',
   'last' => 'Real',
 );
 $friends[] = array(
   'first' => 'Brian',
   'last' => 'Adams',
 );
 $friends[] = array(
   'first' => 'Douglas',
   'last' => 'Seldom',
 );

 $vars['myname'] = 'Jon Doe';
 $vars['friends'] = $friends;
 $content = new tmpl('index.html',$vars);

 $output->out($content);
?>


The output $content contains is:
<p>
 <b>Hello World!</b><br />
 My name is Jon Doe.<br />
 And these are my friends:<br />
 <ul>
  <li>Real, Scott</li><li>Adams, Brian</li><li>Seldom, Douglas</li>
 </ul>
</p>

The user see this output embedded in the standard design of the system.



                -----------------------------------

Maintainers List

P: Person
M: Mail patches to

calendar
P:      Maikel Linke
M:      maikel@gfs-dh.de

dateien
P:      Christian Zedler
M:      christian@gfs-dh.de

dokumentation
P:      Maikel Linke
M:      maikel@gfs-dh.de

forum
P:      Maikel Linke
M:      maikel@gfs-dh.de

messages
P:      Maikel Linke
M:      maikel@gfs-dh.de

news
P:      Christian Zedler
M:      christian@gfs-dh.de

setup
P:      Maikel Linke
M:      maikel@gfs-dh.de

users
P:      Maikel Linke
M:      maikel@gfs-dh.de

supply
P:      Maikel Linke
M:      maikel@gfs-dh.de

zensuren
P:      Maikel Linke
M:      maikel@gfs-dh.de

the rest
P:      Maikel Linke, Christian Zedler
M:      maikel@gfs-dh.de, christian@gfs-dh.de
